<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.camp.s1.member.MemberDAO">

<!-- Join -->
<insert id="setMemberJoin" parameterType="MemberDTO">
	INSERT INTO MEMBER
	VALUES(#{id}, #{pw}, #{name}, #{phone}, #{email}, 'MEMBER')
</insert>

<insert id="setAddressJoin" parameterType="AddressDTO">
	INSERT INTO ADDRESS(ADDRESSNUM, ID, ADDRESSNAME, ADDRESS, ADDRESSDETAIL, POSTCODE)
	VALUES(ADDRESSSEQ.NEXTVAL, #{id}, #{addressName},#{address}, #{addressDetail}, #{postCode})
</insert>

<!-- Login -->
<select id="getMemberLogin" parameterType="MemberDTO" resultMap="MemberResult">
	SELECT * FROM MEMBER
	LEFT JOIN
	ADDRESS
	USING(ID)
	WHERE ID=#{id}
</select>

<resultMap type="MemberDTO" id="MemberResult">
<id column="ID" property="id"/>
<result column="PW" property="pw"/>
<result column="NAME" property="name"/>
<result column="PHONE" property="phone"/>
<result column="EMAIL" property="email"/>
<result column="ROLENAME" property="roleName"/>
<collection property="addressDTOs" javaType="List" ofType="AddressDTO">
<id column="ADDRESSNUM" property="addressNum"/>
<result column="ADDRESSNAME" property="addressName"/>
<result column="ADDRESS" property="address"/>
<result column="ADDRESSDETAIL" property="addressDetail"/>
<result column="POSTCODE" property="postCode"/>
</collection>
</resultMap>

<!-- Update -->
<update id="setMemberUpdate" parameterType="MemberDTO">
	UPDATE MEMBER SET NAME=#{name}, PHONE=#{phone}, EMAIL=#{email}, ROLENAME=#{roleName}
	WHERE ID =#{id}
</update>

<update id="setAddressUpdate" parameterType="AddressDTO">
	UPDATE ADDRESS SET ADDRESSNAME=#{addressName}, ADDRESS=#{address}, 
	ADDRESSDETAIL=#{addressDetail}, POSTCODE=#{postCode}
	WHERE ADDRESSNUM=#{addressNum}
</update>

<update id="setRoleNameUpdate" parameterType="MemberDTO">
	UPDATE MEMBER SET ROLENAME=#{roleName}
	WHERE ID=#{id}
</update>

<delete id="setEachAddressDelete" parameterType="AddressDTO">
	DELETE ADDRESS WHERE ADDRESSNUM=#{addressNum}
</delete>

<!-- Delete -->
<delete id="setMemberDelete" parameterType="MemberDTO">
	DELETE MEMBER WHERE ID=#{id}
</delete>

<delete id="setAddressDelete" parameterType="AddressDTO">
	DELETE ADDRESS WHERE ID=#{id}
</delete>

<!--Find Id  -->
<select id="findId" parameterType="MemberDTO" resultType="MemberDTO">
	SELECT ID FROM MEMBER 
	WHERE EMAIL=#{email}
</select>

<!-- ChangePw -->
<update id="setMemberPwChange" parameterType="MemberDTO">
	UPDATE MEMBER SET PW=#{pw} WHERE ID=#{id}
</update>

<!-- findKakao  -->
<select id="findKakao" parameterType="java.util.HashMap" resultType="KakaoDTO">
	SELECT * FROM KAKAO 
	WHERE KAKAONAME =#{nickname} AND KAKAOEMAIL=#{email}  
</select>

<!-- KakaoLogin DB저장  -->
<insert id="kakaoLogin" parameterType="java.util.HashMap" >
	INSERT INTO KAKAO(KAKAONAME, KAKAOEMAIL)
	VALUES(#{nickname}, #{email})
</insert>

	<!-- 검색을 위한 조건 -->
  	<sql id="searchCondition">
  		<if test="kind == 'id'">
  			WHERE ID LIKE '%' || #{search} || '%'
  		</if>
  		<if test="kind == 'name'">
  			WHERE NAME LIKE '%' || #{search} || '%'
  		</if>
  	</sql>
  	
<!-- List 출력 -->
<select id="getMemberList" parameterType="Pager" resultType="MemberDTO">
	SELECT * FROM(
	  SELECT ROWNUM R, M.* FROM(
		SELECT * FROM MEMBER
		<include refid="searchCondition"></include>
		ORDER BY LOWER(NAME) ASC
	)M
	) WHERE R BETWEEN #{startRow} AND #{lastRow}
</select>

<!-- 총 회원 출력 -->
<select id="getTotalCount" parameterType="Pager" resultType="Long">
	SELECT COUNT(NAME) FROM MEMBER
	<include refid="searchCondition"></include>
	ORDER BY NAME DESC
</select>

</mapper>